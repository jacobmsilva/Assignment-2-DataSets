{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "worldRecords.csv\n",
      "Columns 6\n",
      "Rows 40\n",
      "\n",
      "--------------------------------\n",
      "Column 0 are indexes of rows, and therefore useless\n",
      "--------------------------------\n",
      "Column 1 is numerical.\n",
      "\n",
      "Column 1 mean is: Distance    32.112725\n",
      "dtype: float64 \n",
      "\n",
      "Max value:  Distance    290.221\n",
      "dtype: float64 \n",
      "\n",
      "Min value:  Distance    0.1\n",
      "dtype: float64\n",
      "\n",
      "--------------------------------\n",
      "Column 2 is categorical.\n",
      "\n",
      "Column 2 mode is:   roadORtrack\n",
      "0       track \n",
      "\n"
     ]
    },
    {
     "ename": "AttributeError",
     "evalue": "'DataFrame' object has no attribute 'bar'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-34-4a9fadba2a04>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     52\u001b[0m                 \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'Column'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'mode is:'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mDS1_Sliced\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m'\\n'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     53\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 54\u001b[1;33m                 \u001b[0mDS1_Sliced\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbar\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     55\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     56\u001b[0m                 \u001b[1;31m# TODO: Add barplot here\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\Anaconda3\\lib\\site-packages\\pandas\\core\\generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   4374\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_info_axis\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_can_hold_identifiers_and_holds_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4375\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 4376\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   4377\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   4378\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mAttributeError\u001b[0m: 'DataFrame' object has no attribute 'bar'"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib as plt\n",
    "import numpy as np\n",
    "import time\n",
    "# TODO: Test categorical data, specifically the mode\n",
    "# TODO: add test for useless data, Timestamps\n",
    "# TODO: histograms per each column: numerical data\n",
    "# TODO: bar plot for categorical columns\n",
    "\n",
    "# These are the files we will be reading\n",
    "data_sets = ['worldRecords.csv'] #['cars.csv', 'head.injury.csv',\n",
    "\n",
    "\n",
    "# Loops through each csv file in 'data_sets'\n",
    "for data in range(len(data_sets)):\n",
    "    # Reads the CSV files with pandas\n",
    "    DS1 = pd.read_csv(data_sets[data])\n",
    "\n",
    "    print(data_sets[data])\n",
    "    print('Columns', len(DS1.columns))\n",
    "    print('Rows', len(DS1.values))\n",
    "    print()\n",
    "\n",
    "    # Booleans used in determining what types of data are in the columns\n",
    "    categorical = False\n",
    "    numerical = False\n",
    "\n",
    "    # Loops through the first row to determine what kind of data we are looking at\n",
    "    for i in range(len(DS1.values[1])):\n",
    "        constant_for_all_observations = True                         # Boolean to determine if a column contains useless information\n",
    "                \n",
    "        # If the data is categorical\n",
    "        if isinstance(DS1.values[1][i], str):\n",
    "            column_data = DS1_Sliced.iterrows()\n",
    "            prev_row = None\n",
    "            for index, row in column_data:\n",
    "                current_row = row[0]\n",
    "                #print(index)\n",
    "                if prev_row:\n",
    "                    if current_row != prev_row:\n",
    "                       constant_for_all_observations = False #Data is a constant and therefore redundant.\n",
    "                prev_row = current_row\n",
    "                \n",
    "            #If the column is not timestamped, carry on with processing the data\n",
    "            if not constant_for_all_observations:\n",
    "                print('--------------------------------')\n",
    "                print('Column', i, 'is categorical.\\n')\n",
    "                categorical = True                      # There is categorical data, sets Boolean to True\n",
    "                DS1_Sliced = DS1.iloc[:, i:i + 1]       # Slices the data into a 1 wide column containing all of the rows\n",
    "\n",
    "                # TODO mode may not work correctly, needs more testing on categorical data\n",
    "                print('Column', i, 'mode is:', DS1_Sliced.mode(), '\\n')\n",
    "\n",
    "                DS1_Sliced.bar()\n",
    "\n",
    "                # TODO: Add barplot here\n",
    "                print()                                 # Blank line for formatting\n",
    "            # Else the column is indexes\n",
    "            else:\n",
    "                print('--------------------------------')\n",
    "                print('Column', i,  'is constant throughout, therefore redundant')\n",
    "                \n",
    "        # Else the data is numerical\n",
    "        else:\n",
    "            DS1_Sliced = DS1.iloc[:, i:i + 1]  # Slices the data into a 1 wide column containing all of the rows\n",
    "\n",
    "            # Loops through each element in the column:\n",
    "            #   Checks to see if the column is just the index for the row\n",
    "            for index, row in DS1_Sliced.iterrows():\n",
    "                #print(row[0] , \" for index\",index+1)               \n",
    "                if row[0] == index+1:\n",
    "                    is_an_index_row = True\n",
    "                else:\n",
    "                    is_an_index_row = False\n",
    "            \n",
    "            # If the column is not indexes, carry on with processing the data\n",
    "            if not is_an_index_row:\n",
    "                print('--------------------------------')\n",
    "                print('Column', i, 'is numerical.\\n')\n",
    "                numerical = True                        # There is numerical data, sets the Boolean to True\n",
    "                \n",
    "                print('Column', i, 'mean is:', DS1_Sliced.mean(), '\\n')\n",
    "                \n",
    "                print('Max value: ', DS1_Sliced.max(), '\\n')\n",
    "                print('Min value: ', DS1_Sliced.min())\n",
    "\n",
    "                # TODO: add histogram here\n",
    "                DS1_Sliced.hist()\n",
    "                print()\n",
    "                \n",
    "            # Else the column is indexes\n",
    "            else:\n",
    "                print('--------------------------------')\n",
    "                print('Column', i,  'are indexes of rows, and therefore useless')\n",
    "\n",
    "    # If statements to check if the values are numerical, categorical or both\n",
    "    print('--------------------------------')\n",
    "    if categorical and not numerical:\n",
    "        print(\"The data in\", data_sets[data], \"is categorical\")\n",
    "        print()\n",
    "    if not categorical and numerical:\n",
    "        print(\"The data in\", data_sets[data], \"is numerical\")\n",
    "        print()\n",
    "    if categorical and numerical:\n",
    "        print(\"The data in\", data_sets[data], \"is both numerical and categorical\")\n",
    "        print()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
